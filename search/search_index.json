{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started with Lulu Supercomputers (HPC)","text":"<p>Supercomputers offer immense computing power for demanding tasks, but using them requires some understanding. This guide breaks down the key steps:</p>"},{"location":"#1-accessing-hpc","title":"1. Accessing HPC","text":"<ul> <li>Registration or Proposal Submission: Depending on the specific supercomputer, register for a user account or submit a project proposal for computing resources.</li> <li>Logging In: Utilizes SSH to access Login Nodes, typically reserved for users.</li> <li>SSH (Secure Shell) keys: Enhances the authentication and security of your SSH connection.</li> <li>Moving Data: Common tools include <code>rsync</code> for mirroring directories, <code>scp</code> for transferring individual files or folders.</li> </ul>"},{"location":"#2-running-jobs","title":"2. Running Jobs","text":"<ul> <li>Batch Schedulers: HPCuse schedulers to allocate resources for user jobs. These jobs consist of a script detailing commands and required resources (time, memory, processors).</li> <li>Job Scripts: Write a job script specifying the tasks (commands) and the resources your application needs. Supercomputer documentation or support resources can help with this.</li> <li>Submission and Execution: Submit your job script to the scheduler. It waits for available resources and then runs your job on the allocated hardware. This may involve a delay depending on other users' jobs.</li> </ul> <p>Warning</p> <p>Oops! Lulu's system will update sections 3 and 4 soon.</p>"},{"location":"#3-modules","title":"3. Modules","text":"<ul> <li>Managing Software: The Module System allows loading specific software packages (compilers, libraries) without manual installation. </li> <li>Module Commands: Use commands like <code>module list</code>, <code>module avail</code>, <code>module load/unload</code>, and <code>module switch</code> to interact with the Module System.</li> </ul>"},{"location":"#4-parallel-programming","title":"4. Parallel Programming","text":"<ul> <li>Beyond Single Cores: Modern HPCrely on parallel programming techniques like OpenMP and MPI to distribute tasks across multiple processors, significantly accelerating execution.</li> </ul>"},{"location":"connecting/copying-data/","title":"File Transfer","text":"<p>Moving files/folders to or from the HPC offers various methods. </p>"},{"location":"connecting/copying-data/#secure-copy-scp","title":"Secure Copy <code>scp</code>","text":"<p>For single file/folder transfers, <code>scp</code> through ssh is convenient and widely compatible. Here's a basic usage:</p> <p><pre><code>scp [from] [to]\n</code></pre> The source (<code>from</code>) and destination (<code>to</code>) can each be a filename or a directory on your local machine or a remote host.</p> <p>Upload a File from Your Computer to a Cluster</p> <pre><code>$ scp foobar.txt your_username@clustername:/path/to/remote/directory\n</code></pre> <p>In this scenario, <code>foobar.txt</code> is copied to the directory <code>/path/to/remote/directory</code> on remote machine. If <code>foobar.txt</code> is not in your current directory, you can specify the full path:</p> <p>Upload a Directory to a Cluster</p> <pre><code>$ scp -r your_directory your_username@clustername:/path/to/remote/directory\n</code></pre> <p>Download a File from the Cluster to Your Computer</p> <pre><code>$ scp your_username@clustername:/path/to/remote/foobar.txt .\n</code></pre> <p>Here, <code>.</code> represents your current working directory. To specify a different destination, replace <code>.</code> with the full path:</p> <p><pre><code>$ scp your_username@clustername:/path/to/remote/foobar.txt /path/to/local/your_folder\n</code></pre> Further documentation on <code>scp</code> can be found here.</p>"},{"location":"connecting/copying-data/#rsync","title":"<code>rsync</code>","text":"<p>For more complex transfers, <code>rsync</code> offers efficiency, especially for multiple files or entire directory trees. Here's a basic command:</p> <pre><code>$ rsync [options] [source] [destination]\n</code></pre> <pre><code># Connect to the transfer node from the login node\n$ ssh transfer\n\n# Copy a Directory from Local to Remote Server\n$ rsync -avzh path/to/local your_username@clustername:/path/to/remote/directory\n\n# Copy a Directory from Remote to Local Server\n$ rsync -avzh your_username@clustername:/path/to/remote/directory path/to/local\n</code></pre> <p>The <code>-azvh</code> options enable compressed transfer with readable output, preserving timestamps. Another common option, `-r``, synchronizes all subdirectories recursively.</p> <p>Further <code>rsync</code> documentation is available here.</p>"},{"location":"connecting/copying-data/#rclone","title":"Rclone","text":"<p>Use Rclone for cloud storage (Box, Dropbox, Wasabi, AWS S3, or Google Cloud Storage, etc.) transfers. Configure Rclone for each storage type and protect configurations with passwords.</p> <pre><code># Configure Rclone for each storage type using\n$ rclone configure\n</code></pre> <p>During configuration, assign a unique name (e.g., <code>mys3</code>) and provide connection details. After saving, connect to the transfer node (via <code>ssh transfer</code> from the login node) and use the assigned name for file transfers.</p> <pre><code># Copy files to cloud storage\n$ rclone copy localpath/myfile mys3:bucketname/\n\n$ rclone sync localpath/mydir mys3:bucketname/remotedir\n</code></pre> <p>An example of executing rclone can be found here.</p>"},{"location":"connecting/copying-data/#file-transfer-protocol-ftp","title":"File Transfer Protocol (ftp)","text":"<p>FTP, utilized with programs like Filezilla, WinSCP (Windows) or Cyberduck  (OS/Windows), is a network protocol for file exchange with a server. Utilizing such programs with graphical interfaces offers beginners flexibility and ease of use.</p>"},{"location":"connecting/generate-key/","title":"SSH (Secure Shell) keys","text":"<p>When connecting via SSH, entering your password every time can be repetitive. SSH keys offer a password-free alternative, enhancing both convenience and security. </p> <p>Warning</p> <p>Smile's clusters still use passwords, while lulu's clusters require users to submit public keys for authentication.</p> <p>Info</p> <p>Currently, GitHub utilizes SSH for accessing and editing data in its repositories.</p>"},{"location":"connecting/generate-key/#how-do-ssh-keys-work","title":"How do SSH-Keys work?","text":"<p>Imagine having a two-part security system: a public key (like a lock) and a private key (like a key). Anyone can see the public key, but only your private key unlocks it. Similarly, your public key is shared with the server, while your private key stays secret.</p> <p>Traditionally, the RSA algorithm was used for SSH keys. However, elliptic curve cryptography (specifically, <code>ed25519</code>) has emerged as a more secure and efficient alternative. We recommend using <code>ed25519</code> SSH keys for enhanced security and performance.</p> <p>For deeper understanding, explore these Wikipedia articles about public-key cryptography and challenge-response authentication.</p>"},{"location":"connecting/generate-key/#setting-up-ssh-keys-macoslinux","title":"Setting Up SSH Keys (macOS/Linux)","text":""},{"location":"connecting/generate-key/#1-generate-a-key-pair","title":"1. Generate a key pair:","text":"<p>Check if your SSH already has a key by verifying if a file named <code>~/.ssh/id_xxx.pub</code> exists. If not, create a key using the following command (including your email address for easy identification later on):</p> <pre><code>$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>Your terminal should respond:</p> <pre><code>Generating public/private ed25519 key pair.\n</code></pre> <p>Press Enter to accept the default value. Choose a strong passphrase to protect your account if your private key is compromised.</p> <pre><code>Enter passphrase (empty for no passphrase):\nEnter same passphrase again:\n</code></pre> <p>The key pair is saved in the <code>.ssh</code> directory in your home folder, with the public key located at <code>~/.ssh/id_ed25519.pub</code>. If you forget your passphrase, recovery isn't possible; you'll have to generate and upload a new SSH key pair.</p> <p>The session should resemble the following:</p> <pre><code>host:~$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/USER/.ssh/id_ed25519): \nEnter passphrase (empty for no passphrase):\nEnter same passphrase again: \nYour identification has been saved in /home/USER/.ssh/id_ed25519.\nYour public key has been saved in /home/USER/.ssh/id_ed25519.pub.\nThe key fingerprint is:\nSHA256:Z6InW1OYt3loU7z14Kmgy87iIuYNr1gJAN1tG71D7Jc your_email@example.com\nThe key's randomart image is:\n+--[ED25519 256]--+\n|.. . . o         |\n|. . . + +        |\n|.    . = . .     |\n|.     . +oE.     |\n|.       So= o o  |\n| . .   . * = + + |\n|  +   o + B o o .|\n| oo+. .B + + .   |\n|.ooooooo*.  .    |\n+----[SHA256]-----+\n</code></pre> <p>The content of ~/.ssh/id_ed25519.pub should resemble this:</p> <pre><code>ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFzuiaSVD2j5y6RlFxOfREB/Vbd+47ABlxF7du5160ZH your_email@example.com\n</code></pre> <p>To avoid entering the passphrase each time, you can add your key to the SSH agent, which manages keys and remembers passphrases.</p> <pre><code>$ eval \"$(ssh-agent -s)\"\n$ ssh-add\n</code></pre> <p>For MacOS connection issues with SSH keys, try:</p> <pre><code>$ ssh-add --apple-use-keychain\n</code></pre> <p>To verify that the agent is running and your key is loaded, use:</p> <pre><code>$ ssh-add -l\n</code></pre> <p>Ensure the command prints at least one key, displaying the key size, fingerprint hash, and file location in the file system.</p>"},{"location":"connecting/generate-key/#2-upload-your-public-key","title":"2. Upload your public key:","text":"<p>Copy the output of:</p> <p><pre><code>$ cat ~/.ssh/id_ed25519.pub\n</code></pre> and share it with the cluster administrator.</p>"},{"location":"connecting/generate-key/#3-connect-to-a-cluster","title":"3. Connect to a cluster","text":"<pre><code>$ ssh your_username@clustername\n</code></pre>"},{"location":"connecting/generate-key/#using-windows","title":"Using Windows","text":"<p>We recommend using MobaXterm on Windows for SSH connections as it simplifies SSH key management. </p> <p>To get MobaXterm:</p> <ul> <li>Visit https://mobaxterm.mobatek.net/download-home-edition.html</li> <li>Download either the Portable edition (blue button on the left, suitable for users without admin rights) or the Installer edition (green button on the right, requires admin rights).</li> <li>Install or unpack MobaXterm and launch the software. Remember to dismiss any firewall warnings that may appear.</li> </ul> <p>Here's how to set up SSH keys with MobaXterm:</p> <ul> <li>Open MobaXterm.</li> <li>Go to Tools -&gt; MobaKeyGen (SSH key generator).</li> <li>Click \"Generate\" with default settings.</li> <li>Move your mouse to generate randomness.</li> <li>Save the public key as id_rsa.pub and the private key (keep this secret!) as id_rsa.ppk.</li> <li>Upload your public key: Copy the public key text and forward it to the cluster administrator.</li> <li>Connect to a cluster using MobaXterm.</li> </ul>"},{"location":"connecting/generate-key/#connecting-from-another-computerlaptop","title":"Connecting from Another Computer/Laptop","text":"<p>To connect to the cluster from a different computer than the one where your SSH keys are stored, you have two options:</p> <ul> <li>Generate a new SSH key pair and submit the public part as explained earlier.</li> <li>Copy the private part of the SSH key (<code>~/.ssh/id_ed25519</code>) to the second computer in the same location.</li> </ul> <pre><code>$ cd ~/.ssh\n$ chmod g-rwx id_ed25519*\n$ ssh-add id_ed25519\n</code></pre> <p>Danger</p> <p>Do not keep the key on any USB stick. Delete it after transferring the file. This is sensitive data. Ensure that the files are only readable by you.</p>"},{"location":"connecting/ssh-connection/","title":"SSH Connection","text":""},{"location":"connecting/ssh-connection/#2-connect-with-mobaxterm","title":"2. Connect with MobaXterm:","text":"<ul> <li>Open MobaXterm.</li> <li>Create a new session (Sessions -&gt; New Session).</li> <li>Select the SSH icon and enter the cluster login node address (e.g., tcp.ap.ngrok.io for smile machine or giangnguyen.zapto.org for lulu machine ).</li> <li>Specify your account_name as the username.</li> <li>Under \"Advanced SSH Settings,\" enable \"Use private key\" and choose your private key file (<code>id_rsa.ppk</code>).</li> <li>Click OK.</li> <li>Your saved session should appear in the MobaXterm main window.</li> </ul>"}]}